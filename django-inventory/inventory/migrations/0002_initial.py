# Generated by Django 5.1.1 on 2024-12-02 14:01

import uuid

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("inventory", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Attribute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SeasonalEvent",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "db_table": "inventory_seasonal_event",
            },
        ),
        migrations.CreateModel(
            name="AttributeValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("attribute_value", models.CharField(max_length=100)),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.attribute",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_attribute_value",
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("slug", models.SlugField(blank=True, max_length=100, unique=True)),
                ("is_active", models.BooleanField(default=False)),
                ("level", models.IntegerField(default=100)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="inventory.category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory Category",
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pid", models.CharField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("slug", models.SlugField(blank=True, max_length=220, unique=True)),
                ("description", models.TextField(null=True)),
                ("is_digitial", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=False)),
                (
                    "stock_status",
                    models.CharField(
                        choices=[
                            ("IS", "In Stock"),
                            ("OOS", "Out of Stock"),
                            ("BO", "Back Ordered"),
                        ],
                        default="OOS",
                        max_length=3,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="inventory.category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductLine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, max_digits=5)),
                ("sku", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("stock_qty", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=False)),
                ("order", models.IntegerField()),
                ("weight", models.FloatField()),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="inventory.product",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_product_line",
            },
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("alternative_text", models.CharField(max_length=100)),
                ("url", models.ImageField(upload_to="")),
                ("order", models.IntegerField()),
                (
                    "product_line",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.productline",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_product_image",
            },
        ),
        migrations.CreateModel(
            name="ProductLine_AttributeValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attribute_value",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.attributevalue",
                    ),
                ),
                (
                    "product_line",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.productline",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="productline",
            name="attribute_values",
            field=models.ManyToManyField(
                related_name="attribute_values",
                through="inventory.ProductLine_AttributeValue",
                to="inventory.attributevalue",
            ),
        ),
        migrations.CreateModel(
            name="ProductType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("level", models.IntegerField()),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="inventory.producttype",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_product_type",
            },
        ),
        migrations.CreateModel(
            name="Product_ProductType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.product",
                    ),
                ),
                (
                    "product_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.producttype",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="product",
            name="product_type",
            field=models.ManyToManyField(
                related_name="product_type",
                through="inventory.Product_ProductType",
                to="inventory.producttype",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="seasonal_event",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="inventory.seasonalevent",
            ),
        ),
        migrations.CreateModel(
            name="StockControl",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("stock_qty", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
                (
                    "stock_product",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.product",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.CheckConstraint(
                condition=models.Q(("name", ""), _negated=True), name="name_not_empty"
            ),
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_category
                ADD CONSTRAINT inventory_category_chk_empty_name
                CHECK (name <> '' AND name is NOT NULL)
            """
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION lowercase_name_trigger()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.name := LOWER(NEW.name);
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER category_lowercase_name_trigger
                BEFORE INSERT OR UPDATE ON inventory_category
                FOR EACH ROW
                EXECUTE FUNCTION lowercase_name_trigger();
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_category
                ADD CONSTRAINT inventory_category_chk_slug_format
                CHECK (slug ~ '^[a-z0-9_-]+$' AND lower(slug) = slug);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_category
                ADD CONSTRAINT inventory_category_chk_unique_name_level
                UNIQUE (name, level);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_category
                ADD CONSTRAINT inventory_category_chk_level_range
                CHECK (level >= 0 AND level <= 10);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_seasonal_event
                ADD CONSTRAINT inventory_seasonal_event_chk_empty_name
                CHECK (name <> '' AND name is NOT NULL)
            """
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION lowercase_name_trigger()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.name := LOWER(NEW.name);
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER seasonal_event_lowercase_name_trigger
                BEFORE INSERT OR UPDATE ON inventory_seasonal_event
                FOR EACH ROW
                EXECUTE FUNCTION lowercase_name_trigger();
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product_type
                ADD CONSTRAINT inventory_product_type_chk_empty_name
                CHECK (name <> '' AND name is NOT NULL)
            """
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION lowercase_name_trigger()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.name := LOWER(NEW.name);
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER product_type_lowercase_name_trigger
                BEFORE INSERT OR UPDATE ON inventory_product_type
                FOR EACH ROW
                EXECUTE FUNCTION lowercase_name_trigger();
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product_type
                ADD CONSTRAINT inventory_product_type_chk_unique_name_level
                UNIQUE (name, level);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product_type
                ADD CONSTRAINT inventory_product_type_chk_level_range
                CHECK (level >= 0 AND level <= 10);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_attribute
                ADD CONSTRAINT inventory_attribute_chk_empty_name
                CHECK (name <> '' AND name is NOT NULL)
            """
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION lowercase_name_trigger()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.name := LOWER(NEW.name);
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER attribute_lowercase_name_trigger
                BEFORE INSERT OR UPDATE ON inventory_attribute
                FOR EACH ROW
                EXECUTE FUNCTION lowercase_name_trigger();
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product
                ADD CONSTRAINT inventory_product_chk_empty_name
                CHECK (name <> '' AND name is NOT NULL)
            """
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION lowercase_name_trigger()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.name := LOWER(NEW.name);
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER product_name_trigger
                BEFORE INSERT OR UPDATE ON inventory_product
                FOR EACH ROW
                EXECUTE FUNCTION lowercase_name_trigger();
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product
                ADD CONSTRAINT inventory_product_chk_slug_format
                CHECK (slug ~ '^[a-z0-9_-]+$' AND lower(slug) = slug);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product
                ADD CONSTRAINT inventory_product_chk_empty_name
                CHECK (name <> '' AND name is NOT NULL)
            """
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION lowercase_name_trigger()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.name := LOWER(NEW.name);
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER product_lowercase_name_trigger
                BEFORE INSERT OR UPDATE ON inventory_product
                FOR EACH ROW
                EXECUTE FUNCTION lowercase_name_trigger();
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product
                ADD CONSTRAINT inventory_product_chk_slug_format
                CHECK (slug ~ '^[a-z0-9_-]+$' AND lower(slug) = slug);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_attribute_value
                ADD CONSTRAINT inventory_attribute_value_chk_unique_name_level
                UNIQUE (attribute_id, attribute_value);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product_line
                ADD CONSTRAINT inventory_product_line_chk_price_postive
                CHECK (price > 0);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product_line
                ADD CONSTRAINT inventory_product_line_chk_stock_postive
                CHECK (stock_qty >= 0);
            """
        ),
        migrations.RunSQL(
            """
                ALTER TABLE inventory_product_image
                ADD CONSTRAINT inventory_product_image_chk_unique_product_order
                CHECK (product_product_line, "order");
            """
        ),
    ]
